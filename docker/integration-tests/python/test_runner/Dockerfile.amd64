FROM python:3.8-slim-buster as base_stage  

ARG HTTP_PROXY
ARG HTTPS_PROXY

ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}

# Ensures real-time logs and debugging

RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"


# > > > > > > > > > > > > > > > > > > > > > STAGE 1: 
FROM base_stage as pre-build_stage
# Create build directory
RUN mkdir /build
WORKDIR /build

RUN python -m pip install --upgrade pip

# still using a local requirements not root level as we need junit-xml for dev.
COPY requirements.txt .
# install all project level dependencies
RUN python -m pip install -r requirements.txt --no-cache-dir

# this is needed for building the platform 
RUN python -m pip install wheel --no-cache-dir


# > > > > > > > > > > > > > > > > > > > > > STAGE 2: 
FROM pre-build_stage as build_stage

COPY /src/sdk/python ./src/sdk/python

# Create lib directory for building from scratch 
RUN mkdir -p /build/src/sdk/python/lib

RUN ls /build/src/sdk/python/pkg

WORKDIR /build/src/sdk/python/pkg

# Build Binary platform library distribution
RUN python setup.py egg_info --egg-base ../lib bdist_wheel --dist-dir=../lib clean --all

# Now install the latest platform distro just built
# pip install will take the latest version of boschio.iotea using find-links=file
RUN python -m pip install --find-links=file:../lib boschio.iotea --no-cache-dir --force

RUN rm -rf *whl 


# > > > > > > > > > > > > > > > > > > > > > STAGE 3: 
FROM build_stage as runtime_stage
ARG INTEGRATION_TEST_PATH

WORKDIR /build/app

COPY ${INTEGRATION_TEST_PATH}/test_runner.py .
ENTRYPOINT ["python", "./test_runner.py"]

